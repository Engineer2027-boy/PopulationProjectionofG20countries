# basic flask layout will work on it more
from flask import Flask, render_template, request
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
import base64

app = Flask(__name__)


Index = ['USA', 'China', 'India', 'Japan', 'SouthKorea', 'Russia', 'Canada', 'Indonesia', 'Argentina', 'Germany',
         'France', 'UK', 'SaudiArabia', 'Brazil', 'Mexico', 'SouthAfrica', 'Italy', 'Turkey', 'Australia']


file = pd.read_excel("C:\\Users\\AYUSH ADITYA\\Desktop\\Data Science Documents\\Demographics_of_G20_Nations.xlsx",
                     sheet_name="Sheet3")

year_start = [1.862, 1.5697, 3.58, 1.5, 1.3423, 2, 1.89, 2.41, 1.81, 2.17, 1.92, 1.68, 4.81, 2.4183, 2.72, 2.61,
              1.22, 2.1, 1.8]


@app.route("/")
def home():
    return render_template("homepage.html")


@app.route("/p", methods=["GET", "POST"])
def population_projection():
    selected_country = None
    image = None

    if request.method == "POST":
        selected_country = request.form.get("country")
        if selected_country in Index:
            index = 0
            selected_country_f = selected_country + "_Fertility"
            fertility = file[selected_country_f].to_numpy()
            goal = year_start[Index.index(selected_country)]
            for i in range(len(fertility)):
                if fertility[i] == goal:
                    index = i
                    break

            column = selected_country + "_Population"

            # Extract data
            years = file["Year"][index:].to_numpy()
            population = file[column][index:].to_numpy()

            # Filter out NaNs and get data up to 2024
            mask = (~np.isnan(population)) & (years <= 2024)
            years = years[mask]
            population = population[mask]
            # Fit 2nd-degree polynomial
            X = np.vstack([years ** 2, years, np.ones_like(years)]).T
            Y = population.reshape(-1, 1)
            beta = np.linalg.solve(X.T @ X, X.T @ Y).flatten()
            a, b, c = beta
            # Create ranges for plotting
            historical_years = years[years <= 2024]
            historical_pop = population[years <= 2024]
            projection_years = np.arange(2024, 2051)
            projection_pop = a * projection_years ** 2 + b * projection_years + c
            # Plot
            plt.figure(figsize=(10, 6))
            # Solid line for historical data
            plt.plot(historical_years, historical_pop, 'b-', linewidth=2, label="Actual Data")
            # Dashed line for projection
            plt.plot(projection_years, projection_pop, 'b-', linewidth=2, label="Projection")
            # Mark the transition point
            plt.scatter([2024], [a * 2024 ** 2 + b * 2024 + c], color='green', zorder=5)
            plt.title(f"Population Projection for {selected_country}")
            plt.xlabel("Year")
            plt.ylabel("Population (millions)")
            plt.grid(True)
            plt.legend()
            plt.tight_layout()
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            image = base64.b64encode(buf.read()).decode('utf-8')
            buf.close()
            plt.close()

    return render_template("population_projection.html", image=image, countries=Index, selected_country=selected_country)


@app.route('/m')
def methodology():
    return render_template("methodology.html")


if __name__ == "__main__":
    app.run(debug=True)














